!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("lodash")):"function"==typeof define&&define.amd?define(["lodash"],n):"object"==typeof exports?exports.webpackNumbers=n(require("lodash")):e.webpackNumbers=n(e._)}(self,(function(e){return(self.webpackChunkwebpackNumbers=self.webpackChunkwebpackNumbers||[]).push([[826,740],{48:(e,n,t)=>{"use strict";t.r(n);var o=t(379),r=t.n(o),s=t(795),a=t.n(s),c=t(569),i=t.n(c),u=t(565),l=t.n(u),f=t(216),p=t.n(f),d=t(589),m=t.n(d),h=t(426),y={};y.styleTagTransform=m(),y.setAttributes=l(),y.insert=i().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=p(),r()(h.Z,y),h.Z&&h.Z.locals&&h.Z.locals;var v=t(88),b=t(267),g=t.n(b),A=t(522),C=t.n(A);const w=JSON.parse('{"T":"TOML Example","c":{"u2":"Tom Preston-Werner"}}'),x=JSON.parse('{"T":"YAML Example","c":{"u2":"Tom Preston-Werner"}}'),T=JSON.parse('{"T":"JSON5 Example","c":{"u2":"Tom Preston-Werner"}}');var E=t(134);t(607),console.log(w.T),console.log(w.c.u2),console.log(x.T),console.log(x.c.u2),console.log(T.T),console.log(T.c.u2),async function(){const e=document.createElement("div"),{_:n}=await Promise.resolve().then(t.t.bind(t,607,23)),o=document.createElement("button");e.innerHTML=n.join(["Hello","webpack"]," "),e.classList.add("hello");const r=new Image;return r.src=v,o.innerHTML="Click me and check the console!",e.onclick=E.default.bind(null,"Hello webpack!"),e.appendChild(o),e.appendChild(r),console.log(g()),console.log(C()),e}().then((e=>{document.body.appendChild(e)}))},134:(e,n,t)=>{"use strict";function o(e){console.log(e)}t.r(n),t.d(n,{default:()=>o})},426:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var o=t(537),r=t.n(o),s=t(645),a=t.n(s),c=t(667),i=t.n(c),u=new URL(t(19),t.b),l=a()(r()),f=i()(u);l.push([e.id,"@font-face {\n  font-family: 'MyFont';\n  src: \n    url("+f+") format('woff');\n  font-weight: 600;\n  font-style: normal;\n}\n\n.hello {\n  color: blue;\n  font-family: 'MyFont';\n}\n\n/*\n  margin: 0;\n  width:100px;\n  height:auto;\n*/\n/*\ndiv.background {\n    opacity: 0.6;\n}\n*/\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB;0DACyC;EACzC,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,qBAAqB;AACvB;;AAEA;;;;CAIC;AACD;;;;CAIC",sourcesContent:["@font-face {\n  font-family: 'MyFont';\n  src: \n    url('./Sweet Kiss.woff') format('woff');\n  font-weight: 600;\n  font-style: normal;\n}\n\n.hello {\n  color: blue;\n  font-family: 'MyFont';\n}\n\n/*\n  margin: 0;\n  width:100px;\n  height:auto;\n*/\n/*\ndiv.background {\n    opacity: 0.6;\n}\n*/\n"],sourceRoot:""}]);const p=l},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var i=this[c][0];null!=i&&(a[i]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);o&&a[l[0]]||(void 0!==s&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=s),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),s="/*# ".concat(r," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([s]).join("\n")}return[n].join("\n")}},522:e=>{e.exports=[["to","from","heading","body"],["Mary","John","Reminder","Call Cindy on Tuesday"],["Zoe","Bill","Reminder","Buy orange juice"],["Autumn","Lindsey","Letter","I miss you"]]},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var s={},a=[],c=0;c<e.length;c++){var i=e[c],u=o.base?i[0]+o.base:i[0],l=s[u]||0,f="".concat(u," ").concat(l);s[u]=l+1;var p=t(f),d={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)n[p].references++,n[p].updater(d);else{var m=r(d,o);o.byIndex=c,n.splice(c,0,{identifier:f,updater:m,references:1})}a.push(f)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var s=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var c=t(s[a]);n[c].references--}for(var i=o(e,r),u=0;u<s.length;u++){var l=t(s[u]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}s=i}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var s=t.sourceMap;s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},267:e=>{e.exports={note:{to:["Mary"],from:["John"],heading:["Reminder"],body:["Call Cindy on Tuesday"]}}},19:(e,n,t)=>{"use strict";e.exports=t.p+"bfe1ca776dfbb49982fe.woff"},88:(e,n,t)=>{"use strict";e.exports=t.p+"7b9203f3f23fd147ed0f.jpg"},607:n=>{"use strict";n.exports=e}},e=>(48,e(e.s=48))])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,